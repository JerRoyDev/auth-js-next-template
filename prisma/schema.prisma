datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?
  email         String          @unique
  role          Role            @default(user)
  emailVerified Boolean         @default(false)
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  
  // Better Auth Admin Plugin fields
  banned        Boolean         @default(false)
  banReason     String?
  banExpires    DateTime?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  user
  admin
}
 
model Account {
  id                   String   @id @default(cuid())
  userId               String
  provider             String
  providerAccountId    String
  refreshToken         String?
  accessToken          String?
  accessTokenExpiresAt Int?
  scope                String?
  idToken              String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String   @unique
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Better Auth Admin Plugin field (for user impersonation)
  impersonatedBy String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}